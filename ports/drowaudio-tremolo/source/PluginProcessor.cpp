/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TremoloAudioProcessor::TremoloAudioProcessor()
    :  tremoloBufferSize (2048)
{
    for (int i = 0; i < totalNumParams; i++)
    {
        parameters.add (PluginParameter());
        parameters.getReference(i).getValueObject().addListener (this);
    }

    currentSampleRate = 44100;
    tremoloBufferPosition = 0;

    parameters.getReference (rateParam).init ("Rate", UnitHertz, "The rate of the effect",
                                              5.0f, 0.0f, 20.0f, 5.0f);								 
    parameters.getReference (depthParam).init ("Depth", UnitPercent, "The depth of the effect",
                                               100.0f, 0.0f, 100.0f, 100.0f);
    parameters.getReference (shapeParam).init ("Shape",UnitGeneric, "The shape of the tremolo effect",
                                               1.0f, 0.2f, 10.0f, 1.0f);
    parameters.getReference (phaseParam).init ("Phase", UnitDegrees, "The level of offset of the second channel",
                                               0.0f, -180.0f, 180.0f, 0.0f);

    // set up tremolo buffers
    tremoloBufferL.malloc (tremoloBufferSize);
    tremoloBufferR.malloc (tremoloBufferSize);

	fillBuffer(tremoloBufferL, 0);
	fillBuffer(tremoloBufferR, degreesToRadians (parameters.getReference(phaseParam).getValue ()));
}

TremoloAudioProcessor::~TremoloAudioProcessor()
{
    for (int i = 0; i < totalNumParams; i++)
    {
        parameters.getReference(i).getValueObject().removeListener (this);
    }
}

//==============================================================================
const String TremoloAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int TremoloAudioProcessor::getNumParameters()
{
    return totalNumParams;
}

float TremoloAudioProcessor::getParameter (int index)
{
    return parameters.getReference (index).getNormalisedValue();
}

void TremoloAudioProcessor::setParameter (int index, float newValue)
{
    if (index < totalNumParams)
        parameters.getReference (index).setNormalisedValue (newValue);
}

//==============================================================================
float TremoloAudioProcessor::getScaledParameter (int parameterIndex)
{
    return parameters.getReference (parameterIndex).getValue();
}

void TremoloAudioProcessor::setScaledParameter (int parameterIndex, float newValue)
{
    parameters.getReference (parameterIndex).setValue (newValue);
}

float TremoloAudioProcessor::getParameterMin (int parameterIndex)
{
    return parameters.getReference (parameterIndex).getMin();
}

float TremoloAudioProcessor::getParameterMax (int parameterIndex)
{
    return parameters.getReference (parameterIndex).getMax();
}

float TremoloAudioProcessor::getParameterDefault (int parameterIndex)
{
    return parameters.getReference (parameterIndex).getDefault();
}

//==============================================================================


const String TremoloAudioProcessor::getParameterName (int index)
{
    return parameters.getReference (index).getName();
}

const String TremoloAudioProcessor::getParameterText (int index)
{
    return String (parameters.getReference (index).getValue(), 2);
}

const String TremoloAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String TremoloAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool TremoloAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool TremoloAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool TremoloAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool TremoloAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

int TremoloAudioProcessor::getNumPrograms()
{
    return 0;
}

int TremoloAudioProcessor::getCurrentProgram()
{
    return 0;
}

void TremoloAudioProcessor::setCurrentProgram (int index)
{
}

const String TremoloAudioProcessor::getProgramName (int index)
{
    return String::empty;
}

void TremoloAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void TremoloAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    currentSampleRate = sampleRate;
    tremoloBufferPosition = 0;
}

void TremoloAudioProcessor::releaseResources()
{
}

void TremoloAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
	//smoothParameters();
	
	// interpolation variables
	unsigned int iPos1, iPos2;
	float fDiff, fInterpolatedData; 
    
	// find the number of samples in the buffer to process
	int numSamples = buffer.getNumSamples();
	
	// initialise the pointer to samples
	float* sample[numSamples];
	for (int channel = 0; channel < 2; channel++)
	{
		sample[channel] = buffer.getSampleData(channel, 0);
	}
	
	//===================================================================
	// Main Sample Loop
	//===================================================================
	while (--numSamples >= 0)
	{
		// calculte the required buffer position
		iPos1 = (int)tremoloBufferPosition;
		iPos2 = iPos1 + 1;
		if (iPos2 == tremoloBufferSize)
			iPos2 = 0;
		fDiff = tremoloBufferPosition - iPos1;		
		
		// process channels
		for (int channel = 0; channel < 2; channel++)
		{			
			if (channel % 2 == 0) // even channel
				fInterpolatedData = (tremoloBufferL[iPos2] * fDiff) + (tremoloBufferL[iPos1] * (1 - fDiff));
			else // odd channel
				fInterpolatedData = (tremoloBufferR[iPos2] * fDiff) + (tremoloBufferR[iPos1] * (1 - fDiff));				
            
			*sample[channel] *= fInterpolatedData;
			
			// incriment sample pointers
			sample[channel]++;			
		}
		
		// incriment buffer position
		tremoloBufferPosition += tremoloBufferIncriment;
		if (tremoloBufferPosition >= tremoloBufferSize)
			tremoloBufferPosition -= tremoloBufferSize;	
	}

#if 0
    // clear unused channels
    for (int i = JucePlugin_MaxNumInputChannels; i < getNumOutputChannels(); ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
#endif
}

//==============================================================================
bool TremoloAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* TremoloAudioProcessor::createEditor()
{
    return new TremoloAudioProcessorEditor (this);
}

//==============================================================================
void TremoloAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void TremoloAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
void TremoloAudioProcessor::valueChanged (Value& value)
{
    bool updateBuffers = false;
    
    for (int i = 0; i < totalNumParams; i++)
    {
        PluginParameter& currentParameter = parameters.getReference (i);
        if (value.refersToSameSourceAs (currentParameter.getValueObject())) 
        {
            sendParamChangeMessageToListeners (i, currentParameter.getNormalisedValue());
            
            if (i == rateParam)
            {
                float samplesPerTremoloCycle = currentSampleRate / parameters.getReference (rateParam).getValue();
                tremoloBufferIncriment = tremoloBufferSize / samplesPerTremoloCycle;
            }
            else if (i == depthParam 
                     || i == shapeParam
                     || i == phaseParam)
            {
                updateBuffers = true;
            }
        }
    }
    
    if (updateBuffers)
	{
		fillBuffer(tremoloBufferL, 0);
		fillBuffer(tremoloBufferR, degreesToRadians(parameters.getReference (phaseParam).getValue()));
	}
}

PluginParameter& TremoloAudioProcessor::getPluginParameter (int index)
{
    return parameters.getReference (index);
}

float* TremoloAudioProcessor::getTremoloBuffer (int bufferIndex)
{
    if (bufferIndex == 0) 
    {
        return tremoloBufferL;
    }
    else if (bufferIndex == 1) 
    {
        return tremoloBufferR;
    }
    
    return nullptr;
}

void TremoloAudioProcessor::fillBuffer(float* bufferToFill, float phaseAngleRadians)
{
	// Scale parameters
	float depth = parameters.getReference (depthParam).getNormalisedValue() * 0.5;
	float shape = parameters.getReference (shapeParam).getValue();
	
	// create buffer with sine data
	for (uint32 i = 0; i < tremoloBufferSize; ++i)
	{
		// fill buffer with sine data
		double radians = i * 2.0 * (double_Pi / tremoloBufferSize);
		float rawBufferData = sin (radians + phaseAngleRadians);
        //		float rawBufferData = sinLookupTable [(int)((radians + phaseAngle) * lookupScale)];
		
		if (rawBufferData >= 0)
        {
			bufferToFill[i] = ( (pow (rawBufferData, shape) * depth) + (1 - depth));
        }
		else
		{
			rawBufferData *= -1;
			rawBufferData = pow(rawBufferData, shape);
			rawBufferData *= -1;
			bufferToFill[i] = rawBufferData * depth + ( 1 - depth);
		}
    }	
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new TremoloAudioProcessor();
}
