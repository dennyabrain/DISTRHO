/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TremoloAudioProcessorEditor::TremoloAudioProcessorEditor (TremoloAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
    customLookAndFeel = new PluginLookAndFeel();
    setLookAndFeel (customLookAndFeel);
    customLookAndFeel->setColour (Label::textColourId, (Colours::black).withBrightness (0.9f));

	// create the sliders and their labels
	for (int i = 0; i < TremoloAudioProcessor::totalNumParams; i++)
	{
		sliders.add (new Slider ());
		addAndMakeVisible (sliders[i]);
		
		String labelName = ownerFilter->getParameterName (i);
		labels.add (new Label (String::empty, labelName));
		addAndMakeVisible (labels[i]);
		labels[i]->setJustificationType (Justification::left);
		labels[i]->attachToComponent (sliders[i], false);
        
		sliders[i]->addListener (this);
		ownerFilter->getPluginParameter (i).setupSlider (*sliders[i]);
		
		sliders[i]->getValueObject().referTo (ownerFilter->getPluginParameter (i).getValueObject());
        sliders[i]->setTextBoxStyle (Slider::TextBoxRight, false, 60, 18);
		sliders[i]->setColour (Slider::thumbColourId, Colours::grey);
		sliders[i]->setColour (Slider::textBoxTextColourId, Colour (0xff78f4ff));
		sliders[i]->setColour (Slider::textBoxBackgroundColourId, Colours::black);
		sliders[i]->setColour (Slider::textBoxOutlineColourId, Colour (0xff0D2474));
	}
    
	sliders[TremoloAudioProcessor::rateParam]->setSliderStyle (Slider::RotaryVerticalDrag);
	sliders[TremoloAudioProcessor::rateParam]->setColour (Slider::rotarySliderFillColourId, Colours::grey);
	sliders[TremoloAudioProcessor::rateParam]->setTextBoxStyle (Slider::TextBoxBelow, false, 60, 18);
	labels[TremoloAudioProcessor::rateParam]->attachToComponent (sliders[TremoloAudioProcessor::rateParam], false);
	labels[TremoloAudioProcessor::rateParam]->setJustificationType (Justification::centred);
	sliders[TremoloAudioProcessor::depthParam]->setSliderStyle (Slider::RotaryVerticalDrag);
	sliders[TremoloAudioProcessor::depthParam]->setColour (Slider::rotarySliderFillColourId, Colours::grey);
	sliders[TremoloAudioProcessor::depthParam]->setTextBoxStyle (Slider::TextBoxBelow, false, 60, 18);
	labels[TremoloAudioProcessor::depthParam]->attachToComponent (sliders[TremoloAudioProcessor::depthParam], false);
	labels[TremoloAudioProcessor::depthParam]->setJustificationType (Justification::centred);
	
    ownerFilter->getPluginParameter (TremoloAudioProcessor::depthParam).getValueObject().addListener (this);
    ownerFilter->getPluginParameter (TremoloAudioProcessor::shapeParam).getValueObject().addListener (this);
    ownerFilter->getPluginParameter (TremoloAudioProcessor::phaseParam).getValueObject().addListener (this);
    
	// create the buffer views
	addAndMakeVisible (bufferViewL = new TremoloBufferView (ownerFilter->getTremoloBuffer (0),
                                                            ownerFilter->getTremoloBufferSize()));
	bufferViewL->setInterceptsMouseClicks (false, false);
	addAndMakeVisible (bufferViewLLabel = new Label ("lLabel", "L:"));
	bufferViewLLabel->attachToComponent (bufferViewL, true);
	bufferViewLLabel->setFont (Font (30, Font::plain));
    //	bufferView1Label->setColour(Label::textColourId, Colours::white);
	
	addAndMakeVisible (bufferViewR = new TremoloBufferView (ownerFilter->getTremoloBuffer (1),
                                                            ownerFilter->getTremoloBufferSize()));
	bufferViewR->setInterceptsMouseClicks (false, false);
	addAndMakeVisible (bufferViewRLabel = new Label ("rLabel", "R:"));
	bufferViewRLabel->attachToComponent (bufferViewR, true);
	bufferViewRLabel->setFont (Font (30, Font::plain));
    //	bufferView2Label->setColour(Label::textColourId, Colours::white);

#if 0
	if (ownerFilter->getNumInputChannels() == 1)
		setSize (360, 170);
	else
#endif
		setSize (360, 210);

#if 0
	// if plugin is mono set up the accordingly
	if (ownerFilter->getNumInputChannels() < 2)
	{
		sliders[TremoloAudioProcessor::phaseParam]->setVisible(false);
		bufferViewR->setVisible(false);		
	}
#endif
}

TremoloAudioProcessorEditor::~TremoloAudioProcessorEditor()
{
	for (int i = 0; i < TremoloAudioProcessor::totalNumParams; i++)
    {
        sliders[i]->removeListener (this);
    }
    
    TremoloAudioProcessor* ownerFilter = static_cast<TremoloAudioProcessor*> (getAudioProcessor());
    ownerFilter->getPluginParameter (TremoloAudioProcessor::depthParam).getValueObject().removeListener (this);
    ownerFilter->getPluginParameter (TremoloAudioProcessor::shapeParam).getValueObject().removeListener (this);
    ownerFilter->getPluginParameter (TremoloAudioProcessor::phaseParam).getValueObject().removeListener (this);    
}

//==============================================================================
void TremoloAudioProcessorEditor::paint (Graphics& g)
{
	// just clear the window
	Colour backgroundColour(0xFF455769);
    
	backgroundColour = backgroundColour.withBrightness(0.4f);
	g.setColour(backgroundColour);
	g.fillRoundedRectangle(0, 0, getWidth(), getHeight(), 10);
    
    const int verticalLineX = sliders[TremoloAudioProcessor::shapeParam]->getRight() + 10;
	PluginLookAndFeel::drawInsetLine (g, 0, 115, verticalLineX, 115, 2);
	PluginLookAndFeel::drawInsetLine (g, verticalLineX, 0, verticalLineX, 210, 2);
	
	ColourGradient topHighlight(Colours::white.withAlpha(0.3f),
								0, 0,
								Colours::white.withAlpha(0.0f),
								0, 0 + 15,
								false);
	
    
	g.setGradientFill(topHighlight);
	g.fillRoundedRectangle(0, 0, getWidth(), 30, 10);	
	
	ColourGradient outlineGradient(Colours::white,
                                   0, 00,
                                   backgroundColour.withBrightness(0.5f),
                                   0, 20,
                                   false);
	g.setGradientFill(outlineGradient);
	g.drawRoundedRectangle(0, 0, getWidth(), getHeight(), 10, 1.0f);
}

void TremoloAudioProcessorEditor::resized()
{
    const int w = getWidth();
    const int h = getHeight();
    
    sliders[TremoloAudioProcessor::rateParam]->setBounds (20, 35, 70, 70);
	sliders[TremoloAudioProcessor::depthParam]->setBounds (105, 35, 70, 70);
	sliders[TremoloAudioProcessor::shapeParam]->setBounds (5, 140, w - 170, 20);
	sliders[TremoloAudioProcessor::phaseParam]->setBounds (5, 180, w - 170, 20);
    
#if 1
        if (true)
#else
	if (getAudioProcessor()->getNumInputChannels() > 1)
#endif
	{
		bufferViewL->setBounds (w - 125, 20,
								115, ((h - 15) * 0.5f) - 14);
		bufferViewR->setBounds (w - 125, ((h - 15) * 0.5f) + 15 + 2,
								115, ((h - 15) * 0.5f) - 14);
	}
	else if (getAudioProcessor()->getNumInputChannels() == 1)
    {
		bufferViewL->setBounds (w - 150, 20,
								140, (h - 15 - 15));	
    }
}

void TremoloAudioProcessorEditor::valueChanged (Value& value)
{
    TremoloAudioProcessor* owner = static_cast<TremoloAudioProcessor*> (getAudioProcessor());

    if (value.refersToSameSourceAs (owner->getPluginParameter (TremoloAudioProcessor::depthParam).getValueObject())
        || value.refersToSameSourceAs (owner->getPluginParameter (TremoloAudioProcessor::shapeParam).getValueObject())
        || value.refersToSameSourceAs (owner->getPluginParameter (TremoloAudioProcessor::phaseParam).getValueObject()))
    {
        bufferViewL->refreshBuffer();
        bufferViewR->refreshBuffer();
    }
}

void TremoloAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
}

void TremoloAudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    for (int i = 0; i < TremoloAudioProcessor::totalNumParams; i++)
    {
        if (slider == sliders[i])
        {
            getAudioProcessor()->beginParameterChangeGesture (i);
        }
    }
}

void TremoloAudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    for (int i = 0; i < TremoloAudioProcessor::totalNumParams; i++)
    {
        if (slider == sliders[i])
        {
            getAudioProcessor()->endParameterChangeGesture (i);
        }
    }    
}